-- Аннотации типов в Luau

-- Что такое аннотация типа?
-- Аннотация типа — это способ явно указать, какого типа значения принимает переменная или функция.
-- В Luau это делается с помощью двоеточия : и названия типа (number, string, boolean, table и т.д.).
-- Какие бывают типы в Luau?
-- number — любое число (целое или с точкой)
-- string — текст ("Привет", "123")
-- boolean — логическое значение (true или false)
-- table — таблица (массив или словарь)
-- nil — отсутствие значения
-- function — функция
-- any — любой тип (используй осторожно!)
-- свои типы — можно создавать собственные типы для структур (например, игрок, монета)

--------------------------------------------------------------
--------------------------------------------------------------

-- 1. Аннотация типа для переменных

local score: number = 100      -- число
local playerName: string = "Rusik" -- строка
local isActive: boolean = true -- логическое значение

--------------------------------------------------------------
--------------------------------------------------------------

-- 2. Аннотация типа для параметров и возвращаемого значения функции

-- Функция принимает два числа и возвращает число
function sum(a: number, b: number): number
    return a + b
end

local result: number = sum(5, 7)
print("Сумма:", result) -- Ожидается: 12

--------------------------------------------------------------
--------------------------------------------------------------

-- 3. Функция с типом string

function greet(name: string): string
    return "Привет, " .. name
end

print(greet("Алексей")) -- Ожидается: Привет, Алексей

--------------------------------------------------------------
--------------------------------------------------------------

-- 4. Функция с типом boolean

function isEven(n: number): boolean
    return n % 2 == 0
end

print(isEven(4)) -- Ожидается: true
print(isEven(7)) -- Ожидается: false

--------------------------------------------------------------
--------------------------------------------------------------

-- 5. Аннотация типа для таблицы (массив/словарь)

type Player = {
    name: string,
    score: number
}

local player: Player = {
    name = "Rusik",
    score = 150
}

print(player.name, player.score)

--------------------------------------------------------------
--------------------------------------------------------------

-- 6. Функция, принимающая таблицу определённого типа

function printPlayerInfo(p: Player)
    print("Имя:", p.name, "Очки:", p.score)
end

printPlayerInfo(player)

--------------------------------------------------------------
--------------------------------------------------------------

-- Где применяются аннотации типов в Roblox?
-- - В больших проектах для предотвращения ошибок
-- - Для автодополнения и подсказок в редакторе
-- - Для командной работы и понятности кода
-- - Для описания сложных структур (например, инвентарь, игрок, предмет)

--------------------------------------------------------------
--------------------------------------------------------------

-- Практические задачи

-- 1. Напиши функцию, которая принимает два числа (a: number, b: number) и возвращает их произведение (number).
function multiply(a: number, b: number): number
    return a * b
end

print(multiply(3, 5)) -- Ожидается: 15

--------------------------------------------------------------

-- 2. Объяви тип для монеты (Coin), у которой есть поля value (number) и collected (boolean).
type Coin = {
    value: number,
    collected: boolean
}

local coin: Coin = {
    value = 10,
    collected = false
}

print("Монета:", coin.value, coin.collected)

--------------------------------------------------------------

-- 3. Напиши функцию, которая принимает Coin и возвращает строку с описанием монеты.
function coinInfo(c: Coin): string
    return "Монета на " .. c.value .. " очков. Собрана: " .. tostring(c.collected)
end

print(coinInfo(coin))

--------------------------------------------------------------
--------------------------------------------------------------

-- Объяснение:

-- 1. Аннотации типов делают код надёжнее и понятнее.
-- 2. Они помогают редактору подсказывать параметры и находить ошибки до запуска.
-- 3. В больших проектах и команде это стандарт хорошего кода.
-- 4. Ты можешь создавать свои типы для сложных структур (например, игрок, предмет, инвентарь).
-- 5. Если не уверен, какой тип указать — начни с number, string, boolean, а потом изучи type для таблиц.

-- Если остались вопросы по типам или хочешь разобрать свой пример — напиши, я помогу!